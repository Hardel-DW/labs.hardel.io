generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserData {
  id      String        @id @default(cuid())
  userId  String
  user    User          @relation(fields: [userId], references: [id])
  roles   RoleType      @default(USER)
  project ProjectUser[]

  @@unique([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?    @db.Text
  accounts      Account[]
  sessions      Session[]
  UserData      UserData[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id          Int        @id @default(autoincrement())
  minecraftId String     @db.VarChar(80)
  name        String     @db.VarChar(80)
  asset       String     @default("vanilla/missing.webp")
  tag         String?
  custom      Boolean    @default(false)
  categories  Category[]
  Recipes     Recipes?   @relation(fields: [recipesId], references: [id])
  recipesId   Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  Project     Project?   @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(30)
  asset     String    @default("vanilla/missing.webp")
  items     Item[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Project {
  id            String         @id @default(cuid())
  name          String         @db.VarChar(50)
  description   String         @db.VarChar(255)
  version       String         @db.VarChar(10)
  namespace     String         @db.VarChar(50)
  asset         String         @default("project/default.webp")
  users         ProjectUser[]
  items         Item[]
  Recipes       Recipes[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

model Recipes {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  type      String    @db.VarChar(30)
  items     Item[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
}

model Notification {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(50)
  message   String    @db.VarChar(255)
  asset     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
}

model ProjectUser {
  role      ProjectRole @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  Project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  UserData  UserData    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([projectId, userId])
}

enum ProjectRole {
  OWNER
  ADMIN
  USER
}

enum RoleType {
  USER
  ADMIN
}
