generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model UserData {
  id      String        @id @default(cuid())
  userId  String
  user    User          @relation(fields: [userId], references: [id])
  roles   RoleType      @default(USER)
  project ProjectUser[]

  @@unique([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?    @db.Text
  accounts      Account[]
  sessions      Session[]
  UserData      UserData[]
  Activity      Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id          String       @id @default(cuid())
  minecraftId String       @db.VarChar(80)
  name        String       @db.VarChar(80)
  asset       String       @default("vanilla/missing.webp")
  tag         String?
  custom      Boolean      @default(false)
  categories  Category[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  Project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  Ingredient  Ingredient[]

  @@index([projectId])
}

model Category {
  id         String    @id @default(cuid())
  name       String    @db.VarChar(30)
  categoryId String    @db.VarChar(70)
  asset      String    @default("vanilla/missing.webp")
  items      Item[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Project {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(50)
  description String        @db.VarChar(255)
  version     String        @db.VarChar(10)
  namespace   String        @db.VarChar(50)
  asset       String        @default("project/default.webp")
  users       ProjectUser[]
  items       Item[]
  Recipes     Recipes[]
  activities  Activity[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
}

model Recipes {
  id        String       @id @default(cuid())
  name      String       @db.VarChar(50)
  type      RecipeType   @default(SHAPELESS)
  custom    Boolean      @default(false)
  items     Ingredient[]
  Project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt

  @@index([projectId])
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  slot      String   @db.VarChar(50)
  count     Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  Recipes   Recipes? @relation(fields: [recipesId], references: [id], onDelete: Cascade)
  recipesId String?

  @@index([itemId])
  @@index([recipesId])
}

model Activity {
  id        String       @id @default(cuid())
  message   String       @db.VarChar(100)
  asset     String?
  createdAt DateTime     @default(now())
  createdBy User?        @relation(fields: [userId], references: [id])
  userId    String
  Project   Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  action    ActivityType @default(INFO)

  @@index([userId])
  @@index([projectId])
}

model ProjectUser {
  role       ProjectRole @default(USER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  Project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  UserData   UserData    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId     String
  isSelected Boolean     @default(false)
  isInvited  Boolean     @default(false)

  @@id([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum ProjectRole {
  OWNER
  ADMIN
  USER
}

enum RoleType {
  USER
  ADMIN
}

enum ActivityType {
  CREATE
  INFO
  DELETE
}

enum RecipeType {
  SHAPED
  EXACT_SHAPED
  SHAPELESS
  SMELTING
  BLASTING
  SMOKING
  CAMPFIRE
  STONE_CUTTING
  SMITHING
}
